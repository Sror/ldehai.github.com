<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Andy Design]]></title>
  <link href="http://ldehai.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://ldehai.github.io/"/>
  <updated>2013-11-14T21:32:39+08:00</updated>
  <id>http://ldehai.github.io/</id>
  <author>
    <name><![CDATA[Andy.Liu]]></name>
    <email><![CDATA[ldehai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS APP Database Version Control]]></title>
    <link href="http://ldehai.github.io/blog/2013/11/13/ios-app-database-version-control/"/>
    <updated>2013-11-13T21:17:00+08:00</updated>
    <id>http://ldehai.github.io/blog/2013/11/13/ios-app-database-version-control</id>
    <content type="html"><![CDATA[<p>我喜欢在APP里用SQLite数据库，不过有个问题一直困扰着我，当我要加新功能，而原来的表结构已经不能满足要求时，需要修改表，或者新增表。那么老版本升级到新版本时就需要升级数据库，之前我都是判断新表有没有存在，不存在则创建。这样很容易搞乱掉，如果涉及到多个表，判断起来逻辑不清晰，把自己都搞晕了。</p>

<p>在经历过几次折腾后，我发现数据库也需要用版本来控制起来，就像代码有版本一样。这样我只需要判断当前的数据库版本是多少，就知道要不要升级数据库了。假设之前版本是1.0，现在版本是1.1,代码很简单：</p>

<pre><code>NSUserDefaults *pref = [NSUserDefaults standardUserDefaults];
NSString* ver = [pref stringForKey:@"dbver"];
if ([ver isEqualToString:@"1.0"])
{
    NSString *dbPath  = [NSHomeDirectory() stringByAppendingPathComponent:@"Documents/database.db"];

    EGODatabase* database = [EGODatabase databaseWithPath:dbPath];

    NSString *strSql = @"create table newtable(id integer primary key asc, main text);";
    [database executeQuery:strSql];

    [database close];

    NSUserDefaults *pref = [NSUserDefaults standardUserDefaults];
    [pref setValue:@"1.1" forKey:@"dbver"];
}
</code></pre>

<p>当然自己还是要记录好每次升级的变动情况，备查。</p>
]]></content>
  </entry>
  
</feed>
